(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{402:function(e,n,a){"use strict";a.r(n);var t=a(4),s=Object(t.a)({},(function(){var e=this,n=e.$createElement,a=e._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"kubernetes-health-check-探針"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-health-check-探針","aria-hidden":"true"}},[e._v("#")]),e._v(" Kubernetes Health Check 探針")]),e._v(" "),a("p",[e._v("自 Kubernetes 1.8 起, Docker HEALTHCHECK 已在 Kubernetes 中明確禁用.\n此外 Kubernetes 將活動性(livness) 與就緒性(readiness) 檢查區分開來,\n以便其他組件可以做出不同的反應(例如重新啟動容器與服務的端點列表中刪除 Pod)")]),e._v(" "),a("p",[e._v("首先建立 Liveness 功能")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('using Microsoft.Extensions.Diagnostics.HealthChecks;\nnamespace SampleWebAppWithHealthchecks\n{\n   internal class LivenessHealthCheck : IHealthCheck\n   {\n      public Task<HealthCheckResult> CheckHealthAsync(\n        HealthCheckContext context, \n        CancellationToken cancellationToken = default(CancellationToken))\n      {\n         // Some Liveness check\n         Console.WriteLine("Liveness Health check executed.");\n         return Task.FromResult(HealthCheckResult.Healthy());\n      }\n   }\n}\n')])])]),a("p",[e._v("下面是 Readiness 功能")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('using Microsoft.Extensions.Diagnostics.HealthChecks;\nnamespace SampleWebAppWithHealthchecks\n{\n   internal class ReadinessHealthCheck : IHealthCheck\n   {\n      public bool StartupTaskCompleted { get; set; } = false;\n\n      public Task<HealthCheckResult> CheckHealthAsync(\n         HealthCheckContext context, \n         CancellationToken cancellationToken = default(CancellationToken))\n      {\n         // Some Readiness check\n         Console.WriteLine("Readiness health check executed.");\n\n         if (StartupTaskCompleted)\n         {\n            return Task.FromResult(\n              HealthCheckResult.Healthy("The startup task is finished."));\n         }\n\n         return Task.FromResult(\n             HealthCheckResult.Unhealthy("The startup task is still running."));\n      }\n   }\n}\n')])])]),a("p",[e._v("下面是應用程式服務範例, 下面示範延遲15 秒後才啟動 readiness HealthCheck 旗標.")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('namespace SampleWebAppWithHealthchecks\n{\n   internal class StartupHostedService : IHostedService, IDisposable\n   {\n      private readonly int _delaySeconds = 15;\n      private readonly ILogger _logger;\n      private readonly ReadinessHealthCheck _healthCheck;\n\n      public StartupHostedService(ILogger<StartupHostedService> logger,\n         ReadinessHealthCheck healthCheck)\n      {\n         _logger = logger;\n         _healthCheck = healthCheck;\n      }\n\n      public Task StartAsync(CancellationToken cancellationToken)\n      {\n         Console.WriteLine("Start task.");\n\n         // Simulate the effect of a long-running startup task.\n         Task.Run(async () =>\n         {\n             await Task.Delay(_delaySeconds * 1000);\n             _healthCheck.StartupTaskCompleted = true;\n             _logger.LogInformation($"Startup Background Service has started.");\n         });\n\n         return Task.CompletedTask;\n      }\n\n      public Task StopAsync(CancellationToken cancellationToken)\n      {\n         _logger.LogInformation("Startup Background Service is stopping.");\n\n         return Task.CompletedTask;\n      }\n\n      public void Dispose()\n      {\n      }\n   }\n}\n')])])]),a("p",[e._v("接著在 Startup.cs 註冊以上物件")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('public void ConfigureServices(IServiceCollection services)\n{\n   services.AddHostedService<StartupHostedService>();\n   services.AddSingleton<ReadinessHealthCheck>();\n   services.AddSingleton<LivenessHealthCheck>();\n\n   services.AddHealthChecks()\n      .AddLivenessHealthCheck("Liveness", \n         HealthStatus.Unhealthy, \n         new List<string>(){"Liveness"})\n      .AddReadinessHealthCheck("Readiness", \n         HealthStatus.Unhealthy, \n         new List<string>{ "Readiness" });\n}\n\npublic void Configure(IApplicationBuilder app, IHostingEnvironment env)\n{\n   ...\n   app.UseHealthChecks("/health/live", new HealthCheckOptions()\n      {\n         Predicate = check => check.Name == "Liveness"\n      })\n      .UseHealthChecks("/health/ready", new HealthCheckOptions()\n      {\n         Predicate = check => check.Name == "Readiness",\n      });\n\n   app.UseHttpsRedirection();\n   app.UseMvc();\n}\n')])])]),a("p",[e._v("然後在 Kubernetes.yaml 檔案中, 添加readinessProbe / livenessProbe 屬性")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: samplewebapp\n  namespace: default\n  labels:\n    app: samplewebapp\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n        app: samplewebapp\n  template:\n    metadata:\n      name: samplewebapp\n      labels:\n        app: samplewebapp\n    spec:\n      containers:\n      - name: samplewebapp\n        image: YOUR_DOCKER_IMAGE\n        readinessProbe:\n          httpGet:\n            path: /health/ready\n            port: 80\n          initialDelaySeconds: 5\n          periodSeconds: 5\n          failureThreshold: 3\n          successThreshold: 2\n        livenessProbe:\n          httpGet:\n            path: /health/live\n            port: 80\n          initialDelaySeconds: 30\n          periodSeconds: 30\n          failureThreshold: 3\n          successThreshold: 1\n        resources:\n          limits:\n            cpu: 500m\n            memory: 0.5Gi\n          requests:\n            cpu: 100m\n            memory: 0.5Gi\n        terminationMessagePath: "/dev/termination-log"\n        terminationMessagePolicy: File\n        imagePullPolicy: Always\n        securityContext:\n          privileged: false\n      restartPolicy: Always\n      terminationGracePeriodSeconds: 30\n      dnsPolicy: ClusterFirst\n      securityContext: {}\n      schedulerName: default-scheduler\n')])])])])}),[],!1,null,null,null);n.default=s.exports}}]);