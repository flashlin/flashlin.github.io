(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{404:function(r,n,e){"use strict";e.r(n);var u=e(0),d=Object(u.a)({},(function(){var r=this,n=r.$createElement,e=r._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[e("h1",{attrs:{id:"泛型柯里化"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#泛型柯里化","aria-hidden":"true"}},[r._v("#")]),r._v(" 泛型柯里化")]),r._v(" "),e("p",[r._v('現在我們宣告定義一個 "柯里化 add函數" 的方法')]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("declare function curry<T extends number[]>(addFunc: (...args: T) => number): CurryAddX<T>;\n")])])]),e("p",[r._v("上面程式碼 curry 是一個泛型方法, T 是泛型, 表明了只接受 number 陣列.")]),r._v(" "),e("p",[r._v("curry 方法只接受 addFunc 一個參數, 然後這個 addFunc 參數類型是泛型 T.")]),r._v(" "),e("p",[r._v("curry 方法傳回值是一個 CurryAddX 類型.")]),r._v(" "),e("p",[r._v("完整的 curry 程式碼如下")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("type CurryAdd1 = (a: number) => number;\ntype CurryAdd2 = {\n   (a:number): CurryAdd1;\n   (a:number, b: number): number;\n};\ntype CurryAdd3 = {\n   (a: number): CurryAdd2;\n   (a: number, b: number): CurryAdd1;\n   (a: number, b: number, c: number): number;\n};\n\ntype CurryAddX<T> =\n   T extends [number, number, number] ? CurryAdd3 :\n   T extends [number, number] ? CurryAdd2 :\n   T extends [number] ? CurryAdd1 :\n   unknown\n;\n\ndeclare function curry<T extends number[]>\n   (fn: (...args: T) => number): CurryAddX<T>;\n")])])]),e("p",[r._v('最後我們可以這樣用了, 真正的將 "加法函數" 柯里化為 "curryAdd" 函數')]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("const curryAdd = curry((a: number, b: number) => a + b);\n")])])]),e("p",[r._v("到目前為止, 我們創造的 curry 柯里化函數, 只能將一般函數(帶有number 參數) 柯里化, 我們還需要其他參數類型的柯里化方法.")]),r._v(" "),e("p",[r._v("我們可以把 curry 泛型函數中再一次泛型化. 我們先回頭看剛剛的程式碼")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("type CurryAdd1 = (a: number) => number;\n\ntype CurryAdd2 = {\n   (a: number, b:number): number;\n   (a: number): CurryAdd1;\n};\n\ntype CurryAdd3 = {\n   (a: number, b:number, c:number): number;\n   (a: number, b:number): CurryAdd1;\n   (a: number): CurryAdd2;\n};\n\ntype CurryAddX<T> =\n   T extends [number, number, number] ? CurryAdd3 :\n   T extends [number, number] ? CurryAdd2 :\n   T extends [number] ? CurryAdd1 :\n   unknown\n;\n\ndeclare function curry<T extends number[]>(addFunc: (...args: T) => number): CurryAddX<T>;\n")])])]),e("p",[r._v('我們先將上段程式碼中所有 "回傳值" 進行泛型化')]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("type CurryAdd1 = (a: number) => number;\n")])])]),e("p",[r._v("泛型化的程式碼變成如下")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("type CurryAdd1<R> = (a: number) => R;\n")])])]),e("p",[r._v('以此類推, 繼續泛型化其他的 "回傳值", 故上面整個程式碼看起來如下')]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("type CurryAdd1<R> = (a: number) => R;\n\ntype CurryAdd2<R> = {\n   (a: number, b:number): R;\n   (a: number): CurryAdd1<R>;\n};\n\ntype CurryAdd3<R> = {\n   (a: number, b:number, c:number): R;\n   (a: number, b:number): CurryAdd1<R>;\n   (a: number): CurryAdd2<R>;\n};\n\ntype CurryAddX<T, R> =\n   T extends [number, number, number] ? CurryAdd3<R> :\n   T extends [number, number] ? CurryAdd2<R> :\n   T extends [number] ? CurryAdd1<R> :\n   unknown\n;\n\ndeclare function curry<T extends number[], R>(addFunc: (...args: T) => R): CurryAddX<T, R>;\n")])])]),e("p",[r._v('接下來我們再將上面程式碼所有的 "輸入參數" 也泛型化')]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("type CurryAdd1<A, R> = (a: A) => R;\n\ntype CurryAdd2<A, B, R> = {\n   (a: A, b: B): R;\n   (a: A): CurryAdd1<B, R>;\n};\n\ntype CurryAdd3<A, B, C, R> = {\n   (a: A, b: B, c: C): R;\n   (a: A, b: B): CurryAdd1<C, R>;\n   (a: A): CurryAdd2<B, C, R>;\n};\n")])])]),e("p",[r._v("為了讓 CurryAddX 用上面新的泛型參數, 需要用點技巧")]),r._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[r._v("type CurryAddX<T, R> =\n   T extends [any, any, any] ? CurryAdd3<T[0], T[1], T[2], T[3], R> :\n   T extends [any, any] ? CurryAdd2<T[0], T[1], R> :\n   T extends [any] ? CurryAdd1<T[0], R> :\n   unknown\n;\n\ndeclare function curry<T extends any[], R>(addFunc: (...args: T) => R): CurryAddX<T, R>;\n")])])])])}),[],!1,null,null,null);n.default=d.exports}}]);